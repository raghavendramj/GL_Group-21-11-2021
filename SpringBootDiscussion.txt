Spring Boot Mentor Session
--------------

Frameworks :-
	Spring Boot
	Spring JPA -> ORM -> Hibernates

Step1:
	Creating Spring Boot Project :- https://start.spring.io/
	Dependencies Selected :-
		spring-web -> RestFul API's and Spring MVC implementations.
		spring-boot-starter-data-jpa -> Database (MySQL) Operations
		mysql-connector-java -> Driver for MySQL

Step 2:

Layers:
	Data Access Layer
	--------------------
	@Entity -> Java Side mapping for database table
	Book
		id, name, category, author

	@Repository (JPA)
	BookRepository(I) extends JpaRepository<Book, Long>
		By default => findById, findAll, save, deleteById, delete
		https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods
		List<Book> findByName(String name);
		List<Book> findByCategoryAndAuthor(String category, String author);

	Service Layer
	---------------
	@Service
	BookService(I)
		C + R  + U + D
		C -> Book createBook(Book book);

		R -> List<Book> getBooks();
		R -> Book getBook(Long id);
		R -> List<Book> getBooks(String name);
		R -> List<Book> getBooks(String category, String author);

		U -> void updateBook(Long id, Book book);
		D -> void deleteBook(Long id);

	Controller Layer
	------------------
	@RestController
	@RequestMapping("/books")
	BookController

	//CREATE
	@PostMapping
	Book saveBook(@RequestBody Book book)
	URL :- http://localhost:8083/books + { "name" : "Wings of Fire", "category":"Autobiograhy", "author":"APJ AK" }

	//READ
	@GetMapping
	List<Book> getBooks();
	URL:- http://localhost:8083/books/

	@GetMapping("/search/name/{name}")
	List<Book> getBooks(@PathVariable("name") String name);
	URL:- http://localhost:8083/books/search/name/MasterBlaster

	@GetMapping("/search/categoryandauthor")
	List<Book> getBooks(@RequestParam("category") String category, @RequestParam("author") String author);
	URL:- http://localhost:8083/books/search/categoryandauthor?category=Autobiograhy&author=APJ%AK

	@GetMapping("/{id}")
	List<Book> getBooks(@PathVariable("id") Long id);
	URL:- http://localhost:8083/books/1

	@PutMapping("/{id}")
	void updateBook(@PathVariable("id") Long id, @RequestBody Book book);
	URL :- http://localhost:8083/books/1 + { "name" : "Wings of Fire", "category":"Autobiograhy", "author":"APJ AK" }


	@DeleteMapping("/{id}")
	void deleteBook(@PathVariable("id") Long id)
	URL :- http://localhost:8083/books/1


	HTTP Methods :-
		CREATE	-> POST		-> insert into student values("raghav", "raghav@gmail.com");
		READ 		-> GET		-> select * from student; select * from student where id=1; ....
		UPDATE 	-> PUT		-> update student set name="raghav" where id=1;
		DELETE 	-> DELETE	-> delete from table student where id=1;
		
		
		
		select * from student where id=14556; 