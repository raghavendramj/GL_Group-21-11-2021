Sorting and Searching

Floor ->
	3.1-3.9 => 3.0

Ciel	->
	3.1-3.9 => 4.0

DataSet Sizes:

2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9 -> 10s
2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6 -> 3s
2, 3, -> 1s
2, 3, 4, 5, 6, 7, 8, 9, 2, 3,2, 3, 4, 5, 6, 7, 8, 9, 2, 3,2, 3, 4, 5, 6, 7, 8, 9, 2, 3,2, 3, 4, 5, 6, 7, 8, 9, 2, 3,2, 3, 4, 5, 6, 7, 8, 9, 2, 3,2, 3, 4, 5, 6, 7, 8, 9, 2, 3,2, 3, 4, 5, 6, 7, 8, 9, 2, 3 ->12s
2, 3, 4, 5, 6, 7, 8, 9, 2, 32, 3, 4, 5, 6, 7, 8, 9, 2, 32, 3, 4, 5, 6, 7, 8, 9, 2, 3 -> 6s.


7n^5 -3 is O(n^5)

Logarithmic:
	if the size is 20 => algo lesser than 20 => log(n)

Linear
	if the size is 20 => === 20 => n

	 7, 8, 9, 2, 3, 4

Question

Write a program to find the key element in sorted and rotated Array

Steps

1)	Take input of an array n.
2)	sort the array in nlogn(merge, quick) time complexity
3)	Left Rotate the array by the mid element.
4)	Write a program to search an element in time complexity O(logn)

Arr[] = { 3,4,2,1,9,8,7}  // original array

Arr[]= {1,2,3,4,7,8,9}   // sorted array

Arr[] = {7,8,9,1,2,3,4} // rotated array


Sort the array ->

Step 1:
	Sorting Algorithm : Merge Sorting
	Time Complexity : nlogn
	Concept: Divide and Conquer

	Input :- Arr -> {3, 4, 2, 1, 9, 8, 7};
	low -> 0
	high -> arr.size - 1

	mergeSort(arr, low, high)
		-> if(low < high)
			yes ->
				mid  = (low +high) / 2
				// Divide
					3, 4, 2, 1, 9, 8, 7
			low	0		  4		 7-1 = 6 high
							mid
				mergeSort(arr, low, mid); => arr, 0, 4 => arr, 0, 2 => arr, 0, 1
				mergeSort(arr, mid+1, high) => arr, 5, 7
				//Conquer / Merge
				merge(arr, low, mid, high)

------------------------------------------------------------
	merge(arr, low, mid, high)
		i <- low => initial index of first sub-array
		j <- mid + 1 => inital index of my second sub array
		k <- inital index of merged array
		out -> resultant array

		2, 3, 4				1, 7, 8, 9
		-----------------------------------------------------
		-> k++ for all iterations
		 i-> 0, j-> 4, k-> 0 => out [1] -> j++
		 i-> 0, j-> 5, k-> 1 => out [1, 2] -> i++
		 i-> 1, j-> 5, k-> 2 => out [1, 2, 3 ] -> i++
		 i-> 2, j-> 5, k-> 3 => out [1, 2, 3, 4 ] -> i++
		 i-> 3, j-> 5, k-> 4 => out [1, 2, 3, 4 ] -> i++
		 -----------------------------------------------------
		 => Copy all thr right half to the resultant array
		  i-> 3, j-> 5, k-> 4 => out [1, 2, 3, 4 ] -> j++
		  i-> 3, j-> 6, k-> 5 => out [1, 2, 3, 4, 7 ] -> j++
		  i-> 3, j-> 7, k-> 6 => out [1, 2, 3, 4, 7, 8 ] -> j++
		  i-> 3, j-> 8, k-> 7 => out [1, 2, 3, 4, 7, 8, 9 ]
		  -----------------------------------------------------
		  out => 1, 2, 3, 4, 7, 8, 9  => arr
		  -----------------------------------------------------


		while(i<= mid && j <= ub) {
			if(arr[i] < arr[j]){
				out[k] = arr[i];
				i++;
			} else {
				out[k] = arr[j]
				j++;
			}
			k++;
		}

		if(i > mid){
		//copy remaining elements on right half, if there are any
			while( j<= ub){
				out[k] = arr[j];
				k++;
				j++;
			}
		} else {
			//copy the remaining elements on left half, if there are any.
			while(i<=mid){
				out[k] = arr[i];
				i++;
				k++;
			}
		}
		//LAST STEP :- copy the new array from low to high to arr
		for x -> lb to ub x++
			arr[x] = out[x];
		return arr;

Step 2:
	3)	Left Rotate the array by the mid element.
	mid => 4, till 4 we have roatated
	1,2,3,4,7,8,9
	2,3,4,7,8,9,1 -> 1
	3,4,7,8,9,1,2 -> 2
	4,7,8,9,1,2,3  -> 3
	7,8,9,1,2,3,4  -> 4

leftRotateByOne(arr)
	temp -> arr[0]; -> 1
	ORG -> 1,2,3,4,7,8,9
	for i-> 0 to size-2
		arr[i] = arr[i+1]
	INTER -> 2,3,4,7,8,9,9
	arr[size-1] = temp;
	RESULT -> 2,3,4,7,8,9,1

leftRotateByOne(arr) -> 1
	=> leftRotateByOne(arr) -> 2
		=> leftRotateByOne(arr) -> 3
			=> leftRotateByOne(arr) -> 4

Finally
		7,8,9,1,2,3,4  -> 4


Step 3:
	Input : 7,8,9,1,2,3,4
	Search the element
		Linear -> O(n)
		Binary -> O(logn)

	7,8,9,1,2,3,4
	-> starting point -> element =>1 => idx = 3 -> pivot element
	-> end point -> element => 9 => idx = 2

	55 => 0
	
	findPivotElement(arr, low, high)
		//This will safe 
		//if(high < low)
			//return -1;
			
		else if(high == low)
			return low
		
		int mid = (low + high) /2;		
		if(mid < high && arr[mid] > arr[mid+1])
			return mid;
		else if(mid>low && arr[mid] < arr[mid-1])
			return mid-1;
		else if(arr[low] >= arr[mid])
			return findPivotElement(arr, low, mid-1)
		return findPivotElement(arr, mid+1, high);
		
	
	pivotedBinarySearch(arr, n, key){	
		int pivot = findPivotElement(arr, 0, n-1);
		
		// array is already sorted / not rotated
		if(pivot == -1)
			return binartSearch(arr, 0, n-1, key);
			
		else if(arr[pivot] == key)
			return pivot;
			
		7,8,9,1,2,3,4 -> key = 8
		else if(arr[0] <= key)
			return binartSearch(arr, 0, pivot-1, key);
		else 
			7,8,9,1,2,3,4 -> key = 2
			return binartSearch(arr, pivot+1, n-1, key);
	}
		
	binartSearch(arr, low, high, key){
		
		if(high < low)
			return -1;
		int mid = (low + high) /2 ;
		
		if(key == arr[mid])
			return mid;
		else if (key > arr[mid])
			return binartSearch(arr, mid+1, high, low);
		return binartSearch(arr, low, mid-1, key);
			
	}








